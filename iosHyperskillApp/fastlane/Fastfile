fastlane_version "2.208.0"

default_platform(:ios)

platform :ios do
  # Config variables
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  team_name = CredentialsManager::AppfileConfig.try_fetch_value(:team_name)
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

  itc_team_name = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_name)
  itc_team_id = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_id)

  after_all do |lane, options|
    clean_build_artifacts
  end

  error do |lane, exception|
    clean_build_artifacts
  end

  # Testing

  desc "Run all unit tests for scheme"
  lane :run_unit_tests do |options|
    clear_derived_data

    ENV["FASTLANE_EXPLICIT_OPEN_SIMULATOR"] = "0"

    cocoapods(try_repo_update_on_error: true)

    scan()
  end

  # App Store Connect

  desc "Creates new iOS app on both the Apple Developer Portal and App Store Connect"
  lane :register_app do |options|
    app_name = options[:app_name]
    UI.user_error!("App name required") if app_name.nil?

    company_name = options[:company_name]
    UI.user_error!("Name of the company required") if company_name.nil?

    language = options.key?(:language) ? options[:language] : "en-US"
    app_version = options.key?(:app_version) ? options[:app_version] : "0.0.1"

    produce(
      app_identifier: app_identifier,
      app_name: app_name,
      language: language,
      company_name: company_name,
      app_version: app_version,
      team_id: team_id,
      team_name: team_name,
      itc_team_id: itc_team_id,
      itc_team_name: itc_team_name,
    )
  end

  # Code Signing

  desc "Registers new devices to the Apple Dev Portal"
  lane :sync_device_info do
    register_devices(
      devices_file: "fastlane/Devicefile",
      team_id: team_id,
      team_name: team_name,
    )
  end

  desc "Match all certificates for scheme"
  desc "Options: scheme, read_only"
  lane :match_all do |options|
    params = {
      :read_only => options.key?(:read_only) ? options[:read_only] : true,
    }

    match_dev(params)
    match_adhoc(params)
    match_release(params)
  end

  desc "Match development certificates for scheme"
  desc "Options: scheme, read_only"
  lane :match_dev do |options|
    match_scheme(
      type: "development",
      read_only: options.key?(:read_only) ? options[:read_only] : true,
    )
  end

  desc "Match adhoc certificates for scheme"
  desc "Options: scheme, read_only"
  lane :match_adhoc do |options|
    match_scheme(
      type: "adhoc",
      read_only: options.key?(:read_only) ? options[:read_only] : true,
    )
  end

  desc "Match appstore certificates for scheme."
  desc "Options: scheme, read_only"
  lane :match_release do |options|
    match_scheme(
      type: "appstore",
      read_only: options.key?(:read_only) ? options[:read_only] : true,
    )
  end

  private_lane :match_scheme do |options|
    type = options[:type]
    read_only = options.key?(:read_only) ? options[:read_only] : true

    match(
      type: type,
      readonly: read_only,
      app_identifier: app_identifier,
      team_id: team_id,
      team_name: team_name,
      force_for_new_devices: true,
    )
  end

  # Project

  desc "Increment the build number of project"
  lane :increment_build do
    increment_build_number
  end

  desc "Set the version of project"
  desc "Options: version"
  lane :set_version do |options|
    version = options[:version]

    UI.user_error!("Wrong version parameter") if version.nil?

    increment_version_number(version_number: version)
  end

  desc "Increment the minor version of project"
  lane :increment_minor_version do
    increment_version_number(bump_type: "minor")
  end
end
