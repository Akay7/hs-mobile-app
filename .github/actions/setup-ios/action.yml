name: 'Setup CI'
description: 'Setups CI for iOS target'

inputs:
  git-crypt-key:
    description: 'git-crypt.key file base64 content'
    required: true
  google-cloud-storage-code-signing-certificates-key:
    description: 'gc_keys.json file base64 content for code signing APIs communication'
    required: false
  cache-cocoapods-on-pods-cache-miss:
    description: 'Should cache cocoapods on Pods cache miss'
    required: false
    default: false

outputs:
  is-git-crypt-unlocked:
    description: "Is git-crypt unlocked secrets"
    value: ${{ steps.git-crypt-unlock.outputs.value }}

runs:
  using: "composite"
  steps:
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1.5.1
      with:
        xcode-version: '14.0.1'
    
    - name: Generate Hyperskill-Mobile_shared.swift
      run: |
        echo "$(pwd)"
        ls iosHyperskillApp/iosHyperskillApp/Sources/Frameworks/sharedSwift
        touch iosHyperskillApp/iosHyperskillApp/Sources/Frameworks/sharedSwift/Hyperskill-Mobile_shared.swift
        ls iosHyperskillApp/iosHyperskillApp/Sources/Frameworks/sharedSwift
      shell: bash

    - name: Homebrew install git-crypt
      run: brew install git-crypt
      shell: bash
      env:
        HOMEBREW_NO_INSTALL_CLEANUP: true
    
    # Generate git-crypt.key file from base64 file content and decrypt
    - name: git-crypt unlock secrets
      id: git-crypt-unlock
      run: |
        if [ -z "${{ inputs.git-crypt-key }}" ]
        then
          echo "git-crypt-key is required"
          exit 1
        else
          echo "Unlocking secrets with git-crypt"

          echo "${{ inputs.git-crypt-key }}" | base64 --decode > git-crypt.key
          git-crypt unlock git-crypt.key
          rm git-crypt.key

          echo "value=$(echo true)" >> $GITHUB_OUTPUT
        fi
      shell: bash
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1.118.0
      with:
        ruby-version: '2.6.5'
        bundler-cache: true
        working-directory: './iosHyperskillApp'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v3.6.0
      with:
        java-version: '11'
        distribution: 'temurin'
        
    # Cache Gradle dependencies
    - name: Setup Gradle Dependencies Cache
      uses: actions/cache@v3.0.11
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-gradle-caches-
        
    # Cache Gradle Wrapper
    - name: Setup Gradle Wrapper Cache
      uses: actions/cache@v3.0.11
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle*properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-wrapper-
          
    # Cache Kotlin/Native compiler
    - name: Setup Kotlin/Native Compiler Cache
      uses: actions/cache@v3.0.11
      with:
        path: ~/.konan
        key: ${{ runner.os }}-kotlin-native-compiler-${{ hashFiles('gradle/libs.versions.toml') }}
        restore-keys: |
          ${{ runner.os }}-kotlin-native-compiler-
    
    # Fix Cocoapods not being able to access the shared framework file
    - name: Fix Cocoapods generateDummyFramework
      run: ./gradlew generateDummyFramework
      shell: bash

    # Cache Pods dependencies
    - name: Cache Pods
      uses: actions/cache@v3.0.11
      id: cache-pods
      with:
        path: './iosHyperskillApp/Pods'
        key: ${{ runner.os }}-pods-${{ hashFiles('iosHyperskillApp/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    # Cache Cocoapods repository
    - name: Cache Cocoapods
      if: ${{ inputs.cache-cocoapods-on-pods-cache-miss == 'true' && steps.cache-pods.outputs.cache-hit != 'true' }}
      uses: actions/cache@v3.0.11
      with:
        path: ~/.cocoapods
        key: ${{ runner.os }}-cocoapods-${{ hashFiles('iosHyperskillApp/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-cocoapods-

    # Install Pods if cache miss occurred
    - name: Install Pods
      if: steps.cache-pods.outputs.cache-hit != 'true'
      working-directory: './iosHyperskillApp'
      run: bundle exec pod install --repo-update
      shell: bash
      
    # Generate gc_keys.json file from base64 file contents for code signing APIs communication
    - name: Generate Google Cloud Storage keys file
      working-directory: './iosHyperskillApp'
      run: |
        if [ -z "${{ inputs.google-cloud-storage-code-signing-certificates-key }}" ]
        then
          echo "Skipping generate gc_keys.json file"
        else
          echo "Generating gc_keys.json file"
          echo "${{ inputs.google-cloud-storage-code-signing-certificates-key }}" | base64 --decode > gc_keys.json
        fi
      shell: bash