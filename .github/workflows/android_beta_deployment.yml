name: Android Beta Deployment

on:
  push:
    branches:
    - 'feature/**'
    - 'release/**'
    - 'hotfix/**'

defaults:
  run:
    shell: bash

env:
  IS_GIT_CRYPT_UNLOCKED: true
    
jobs:
  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleWrapperValidation:
    name: Gradle Wrapper Validation
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.5
        
  deployment:
    name: Android Beta Deployment
    needs: gradleWrapperValidation
    runs-on: ubuntu-22.04
    environment: android_production
    steps:
    - name: Checkout
      uses: actions/checkout@v3.1.0
        
    - name: Install git-crypt
      run: sudo apt-get install git-crypt
        
    # Generate git-crypt.key file from base64 file contents and decrypt
    - name: git-crypt unlock secrets
      run: |
        echo "$GIT_CRYPT_KEY" | base64 --decode > git-crypt.key
        git-crypt unlock git-crypt.key
        rm git-crypt.key
      env:
        GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}
        
    - name: Setup Java JDK
      uses: actions/setup-java@v3.6.0
      with:
        java-version: '11'
        distribution: 'temurin'
        
    # # Cache Gradle dependencies
    # - name: Setup Gradle Dependencies Cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.gradle/caches
    #     key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}
    #     restore-keys: |
    #       ${{ runner.os }}-gradle-caches-
        
    # # Cache Gradle Wrapper
    # - name: Setup Gradle Wrapper Cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.gradle/wrapper
    #     key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle*properties') }}
    #     restore-keys: |
    #       ${{ runner.os }}-gradle-wrapper-
          
    # # Cache Kotlin/Native compiler
    # - name: Setup Kotlin/Native Compiler Cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.konan
    #     key: ${{ runner.os }}-kotlin-native-compiler-${{ hashFiles('gradle/libs.versions.toml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-kotlin-native-compiler-
      
    # # Generate gc_keys.json file from base64 file contents for code signing APIs communication
    # - name: Generate Google Cloud Storage keys file
    #   working-directory: './iosHyperskillApp'
    #   run: |
    #     echo "$GOOGLE_CLOUD_STORAGE_CODE_SIGNING_CERTIFICATES_KEY_CONTENT" | base64 --decode > gc_keys.json
    #   env:
    #     GOOGLE_CLOUD_STORAGE_CODE_SIGNING_CERTIFICATES_KEY_CONTENT: ${{ secrets.GOOGLE_CLOUD_STORAGE_CODE_SIGNING_CERTIFICATES_KEY_CONTENT }}
    
    # # Build, archive for ad-hoc and submit to the Firebase App Distribution
    # - name: Submit a new Beta Build to Firebase
    #   working-directory: './iosHyperskillApp'
    #   run: bundle exec fastlane beta install_pods:false
    #   env:
    #     FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 60
    #     KEYCHAIN_NAME: ${{ secrets.KEYCHAIN_NAME }}
    #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    #     APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
    #     APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
    #     APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
    #     GITHUB_USER: ${{ github.actor }}
    #     GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
